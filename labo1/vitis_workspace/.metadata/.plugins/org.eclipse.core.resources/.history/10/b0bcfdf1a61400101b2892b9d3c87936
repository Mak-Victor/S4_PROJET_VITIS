/**
 * @file echo.c
 * @brief Echo protocol
 *
 * @section License
 *
 * Copyright (C) 2010-2018 Oryx Embedded SARL. All rights reserved.
 *
 * This file is part of CycloneTCP Open.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @section Description
 *
 * The echo service simply sends back to the originating source
 * any data it receives. Refer to RFC 862 for complete details
 *
 * @author Oryx Embedded SARL (www.oryx-embedded.com)
 * @version 1.9.0
 **/

//Switch to the appropriate trace level
#define TRACE_LEVEL STD_SERVICES_TRACE_LEVEL

//Dependencies
#include "cyclone_tcp/core/net.h"
#include "cyclone_tcp/std_services/echo.h"
#include "xil_io.h"
#include "cyclone_tcp/core/socket.h"

//Check TCP/IP stack configuration
#if (NET_STATIC_OS_RESOURCES == ENABLED)

//UDP Echo service
static OsTask udpEchoTaskStruct;
static uint_t udpEchoTaskStack[ECHO_SERVICE_STACK_SIZE];

#endif


/**
 * @brief Start TCP echo service
 * @return Error code
 **/

/**
 * @brief Start UDP echo service
 * @return Error code
 **/
uint16_t latestVal3 = 0;

EchoServiceContext context;

uint8_t accumulatedData[ECHO_BUFFER_SIZE] = {0};
uint8_t accumulatedData2[ECHO_BUFFER_SIZE] = {0};
int activeBuffer = 0; // Indique quel tampon est actif

void accumulateBinaryChunk(uint8_t *data)
{
    uint8_t *currentBuffer = activeBuffer ? accumulatedData2 : accumulatedData;
    uint8_t *nextBuffer = activeBuffer ? accumulatedData : accumulatedData2;

    size_t currentLength = 0;

    // Cherche la fin du tampon actif
    for (size_t i = 0; i < ECHO_BUFFER_SIZE; i++) {
        if (currentBuffer[i] == 0) break;
        currentLength++;
    }

    // Calcul et affichage de l'espace restant
    size_t remaining = ECHO_BUFFER_SIZE - currentLength - 2; // -2 car on va ajouter 2 octets
    //xil_printf("\n\rEspace restant dans le tampon actif : %d octets\n\r", remaining);

    // On ajoute seulement val1 (2 octets)
    if (currentLength + 2 < ECHO_BUFFER_SIZE)
    {
        currentBuffer[currentLength] = data[0];
        currentBuffer[currentLength + 1] = data[1];
    }
    else
    {
        print("Tampon plein, basculement.\n\r");
        memset(nextBuffer, 0, ECHO_BUFFER_SIZE);
        nextBuffer[0] = data[0];
        nextBuffer[1] = data[1];
        activeBuffer = !activeBuffer;
    }
}






error_t udpEchoStart(void)
{
   error_t error;

   //Allocate a memory block to hold the context
   if(context.socket) socketClose(context.socket);
   //Failed to allocate memory?

   //Start of exception handling block
   do
   {
      //Open a UDP socket
      context.socket = socketOpen(SOCKET_TYPE_DGRAM, SOCKET_IP_PROTO_UDP);

      //Failed to open socket?
      if(context.socket == NULL)
      {
         //Report an error
         error = ERROR_OPEN_FAILED;
         //Exit immediately
         break;
      }

      //The server listens for incoming datagrams on port 8080
      error = socketBind(context.socket, &IP_ADDR_ANY, ECHO_PORT);
      //Unable to bind the socket to the desired port?
      if(error)
         break;
      //End of exception handling block
   } while(0);

   //Any error to report?
   if(error)
   {
      //Clean up side effects...
	   print("failinit");
      socketClose(context.socket);
   }

   //Return status code
   return error;
}


/**
 * @brief UDP echo service implementation
 * @param[in] param Pointer to the echo service context
 **/



void udpEchoTask(void)
{
   error_t error;
   size_t length;
   uint16_t port;
   IpAddr ipAddr;

   // Main loop
   {
      error = socketReceiveFrom(context.socket, &ipAddr, &port,
         context.buffer, ECHO_BUFFER_SIZE, &length, 0);

      if (!error)
      {
         xil_printf("Taille du message recu : %d octets\n\r", length);

         context.buffer[length] = 0;

         // Extraction et ajout des 60 valeurs dans le buffer double
         uint16_t val[120];
         for (int i = 0; i < 121; i++) {
             val[i] = (uint8_t)context.buffer[2*i] << 8 | (uint8_t)context.buffer[2*i + 1];
             if(i != 0){
            	 accumulateBinaryChunk(&context.buffer[2*i]);
             }
         }

         printBufferDebug(accumulatedData);
         printBufferDebug(accumulatedData2);
         xil_printf("\n\rPotentiometre (val3) : %d\n\r", val[0]);


         uint8_t myConstant = 0xAB;
         error = socketSendTo(context.socket, &ipAddr, port,
                              &myConstant, 1, NULL, 0);
      }
   }
}




void printBufferDebug(const uint8_t *buffer)
{
    xil_printf("\n\n\r ADC : ");
    for (int i = 0; i < ECHO_BUFFER_SIZE; i++)
    {
        if (buffer[i] == 0) break;
        xil_printf("%02X ", buffer[i]);
    }
    xil_printf(" ");
}
